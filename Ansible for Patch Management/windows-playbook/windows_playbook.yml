---
- hosts: windows
  vars:
    ansible_connection: winrm
    ansible_ssh_port: 5986
    anisble_winrm_transport: kerberos
    ansible_winrm_server_cert_validation: ignore
    validate_certs: false
    ansible_winrm_scheme: https
    ansibe_winrm_read_timeout_sec: 30
    ignore_unreachable: true
    gather_facts: false
    win_updates:
      - SecurityUpdates
      - CriticalUpdates
      - UpdateRollups
      - Definition Updates
      - Updates
      - Windows Server 2016
      - Windows Defender
      - Feature Packs
      - Silverlight
      - Realtek Semiconductor Corp. - Extension - 10.0.17134.1
  tasks:
   - name: Searching updates
     win_updates:
       state: searched
       catagory_names: "{{ win_updates }}"
     register: update_count
     ignore_errors: yes

   - name: reboot if required
     win_reboot:
        reboot_timeout: 3600
     when: update_count.reboot_required
     ignore_errors: yes

   - name: Install customized updates as required for MedQIA
     win_updates:
       category_names: "{{ win_updates }}"
       whitelist:
        - KB4056892
        - KB4073117
        - KB2267602
        - KB4494452
        - KB4534307
        - KB4481252
        - KB4532938
        - KB4528760
       state: installed
       register: update_result

   - name: updating drivers on updates
     win_updates:
       catagory_names: "{{ win_updates }}"
     register: update_result

   - name: Rebooting a machine with desired updates
     win_reboot:
        reboot_timeout: 3600        
 
# One way to ensure the system is reliable, is to set WinRM to a delayed startup
   - name: Ensure WinRM starts when the system has settled and is ready to work reliably
     win_service:
       name: WinRM
       start_mode: delayed


# Additionally, you can add a delay before running the next task
   - name: Reboot a machine that takes time to settle after being booted
     win_reboot:
       post_reboot_delay: 1200
       reboot_timeout: 3600 

# Or you can make win_reboot validate exactly what you need to work before running the next task
   - name: Validate that the netlogon service has started, before running the next task
     win_reboot:
       test_command: 'exit (Get-Service -Name Netlogon).Status -ne "Running"'
       reboot_timeout: 3600

